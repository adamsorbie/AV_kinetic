temp <- colSums(sub_sample_tax)
# Replace values by new summed values
sample_list[[m]][[position]] <- list(temp)
}
}
#################################################################################
######                         Write output                                ######
#################################################################################
# Generate tables for each taxonomic class
##Kingdom table
# Create table with taxonomic information (kingdom level)
kingdom <-  matrix(unlist(sample_list[[1]]),nrow = dim(otuFile)[2],ncol = list_length[1],dimnames = list(names(otuFile),unlist(class_list[[1]])))
kingdom <- (t(kingdom))
##Phylum table
# Create table with taxonomic information (phylum level)
phyla <-matrix(unlist(sample_list[[2]]),nrow = dim(otuFile)[2],ncol = list_length[2],dimnames = list(names(otuFile),unlist(class_list[[2]])))
phyla <- (t(phyla))
# Order table according to taxonomic name (descending)
phyla <- phyla[order(row.names(phyla)),]
## Class table
# Create table with taxonomic information (class level)
classes <- matrix(unlist(sample_list[[3]]), nrow = dim(otuFile)[2], ncol = list_length[3], dimnames = list(names(otuFile),unlist(class_list[[3]])))
classes <- (t(classes))
# Order dataframe according to taxonomic name (descending)
classes <- classes[order(row.names(classes)),]
## Orders
# create table with taxonomic information (Order)
orders <-matrix(unlist(sample_list[[4]]),nrow = dim(otuFile)[2],ncol = list_length[4],dimnames = list(names(otuFile),unlist(class_list[[4]])))
orders <- (t(orders))
# Order dataframe according to taxonomic name (descending)
orders <- orders[order(row.names(orders)),]
## Family table
# Create table with taxonomic information (family level)
families <-matrix(unlist(sample_list[[5]]),nrow = dim(otuFile)[2],ncol = list_length[5],dimnames = list(names(otuFile),unlist(class_list[[5]])))
families <- (t(families))
# Order dataframe according to taxonomic name (descending)
families <- families[order(row.names(families)),]
## Genus level
# Create table with taxonomic information (generum level)
genera <- matrix(unlist(sample_list[[6]]),nrow = dim(otuFile)[2],ncol = list_length[6],dimnames = list(names(otuFile),unlist(class_list[[6]])))
genera <- (t(genera))
# Order dataframe according to taxonomic name (descending)
genera <- genera[order(row.names(genera)),]
# Merge all dataframes
tax_summary <-rbind.data.frame(kingdom,phyla,classes,orders,families,genera)
# Identify duplicates and remove them
tax_summary <- tax_summary[!duplicated(row.names(tax_summary)),]
View(tax_summary)
library(selbal)
mapping <- read.table("mapping_file.tab",
header = T,
check.names = F,
row.names = 1)
count_data <- read.table("OTUs-Table.tab",
header = T,
check.names = F,
row.names = 1,
comment.char = " ",
sep="\t")
count_data <- count_data[!apply(is.na(count_data) | count_data=="",1,all),]
taxonomy <- count_data[,dim(count_data)[2]]
# Test if the taxonomy column is in the correct format (delimited by semicolon)
if(any(grepl("(?:[^;]*;){6}", taxonomy))==FALSE) {
#Send error message if taxonomy is not in the right format
stop("Wrong number of taxonomic classes\n
Taxonomic levels have to be separated by semicolons (six in total).
IMPORTANT: if taxonomic information at any level is missing, the semicolons are still needed:\n
e.g.Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Prevotellaceae;Prevotella;
e.g.Bacteria;Bacteroidetes;Bacteroidia;Bacteroidales;Prevotellaceae;;")
} else {
otuFile <- count_data[,c(1:dim(count_data)[2] - 1)]
# Initialize empty dataframe
taxonomy_new <- NULL
for (i in 1:dim(count_data)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
# Adjust dataframe with modified taxonomic information
taxonomy_new <- t(as.data.frame(taxonomy_new))
row.names(taxonomy_new) <- row.names(otuFile)
# Add level information to all taxonomies
# For taxonomies related to kingdom level
taxonomy_new[,1] <- sub("^","k__",taxonomy_new[,1])
# For taxonomies related to phylum level
taxonomy_new[,2] <- sub("^","p__",taxonomy_new[,2])
# For taxonomies related to class level
taxonomy_new[,3] <- sub("^","c__",taxonomy_new[,3])
# For taxonomies related to order level
taxonomy_new[,4] <- sub("^","o__",taxonomy_new[,4])
# For taxonomies related to family level
taxonomy_new[,5] <- sub("^","f__",taxonomy_new[,5])
# For taxonomies related to genus level
taxonomy_new[,6] <- sub("^","g__",taxonomy_new[,6])
#################################################################################
# Create list with taxonomic information for each taxonomy level
class_list <-
list(
unique(taxonomy_new[,1]),unique(taxonomy_new[,2]),
unique(taxonomy_new[,3]), unique(taxonomy_new[,4]),
unique(taxonomy_new[,5]),unique(taxonomy_new[,6])
)
# Clone the created list for further processing
sample_list <- class_list
list_length <- NULL
# Iterate through all six taxonomy levels
for (a in 1:6) {
lis <- lapply(class_list[a], lapply, length)
names(lis)<-lapply(class_list[a],length)
# Individual number of taxonomies for each taxonomic level
num_taxa <- as.integer(names(lis))
list_length[a] <- num_taxa
# Iterate through taxonomic class specific taxonomies
for (b  in 1:num_taxa) {
# Initialize list with the value zero for all taxonomies
sample_list[[a]][[b]] <- list(rep.int(0,dim(otuFile)[2]))
}
}
}
#################################################################################
#################################################################################
# Save relative abundances of all samples for each taxonomy
# Iterate through all OTUs
for (i in 1:dim(count_data)[1]) {
# Iterate through all taxonomic levels
for (m in 1:6) {
# List of m-th taxonomies of i-th taxonomic levels (e.g. m = Kingdom, i = 4th OTU -> Clostridiales)
taxa_in_list <- list(taxonomy_new[i,])[[1]][m]
# Record the current position in a list
position <- which(class_list[[m]] == taxa_in_list)
# All rows with taxonomic information of n-th sample
matrix <- data.matrix(otuFile)
sub_sample_tax <-(subset(matrix,taxonomy_new[,m] == taxa_in_list))
# Get the actual value out of the list (initialized with zero)
temp <- unlist(sample_list[[m]][[position]])
# Calculate the summed up relative abundances for the particular taxonomic class for n-th sample
temp <- colSums(sub_sample_tax)
# Replace values by new summed values
sample_list[[m]][[position]] <- list(temp)
}
}
#################################################################################
######                         Write output                                ######
#################################################################################
# Generate tables for each taxonomic class
##Kingdom table
# Create table with taxonomic information (kingdom level)
kingdom <-  matrix(unlist(sample_list[[1]]),nrow = dim(otuFile)[2],ncol = list_length[1],dimnames = list(names(otuFile),unlist(class_list[[1]])))
kingdom <- (t(kingdom))
##Phylum table
# Create table with taxonomic information (phylum level)
phyla <-matrix(unlist(sample_list[[2]]),nrow = dim(otuFile)[2],ncol = list_length[2],dimnames = list(names(otuFile),unlist(class_list[[2]])))
phyla <- (t(phyla))
# Order table according to taxonomic name (descending)
phyla <- phyla[order(row.names(phyla)),]
## Class table
# Create table with taxonomic information (class level)
classes <- matrix(unlist(sample_list[[3]]), nrow = dim(otuFile)[2], ncol = list_length[3], dimnames = list(names(otuFile),unlist(class_list[[3]])))
classes <- (t(classes))
# Order dataframe according to taxonomic name (descending)
classes <- classes[order(row.names(classes)),]
## Orders
# create table with taxonomic information (Order)
orders <-matrix(unlist(sample_list[[4]]),nrow = dim(otuFile)[2],ncol = list_length[4],dimnames = list(names(otuFile),unlist(class_list[[4]])))
orders <- (t(orders))
# Order dataframe according to taxonomic name (descending)
orders <- orders[order(row.names(orders)),]
## Family table
# Create table with taxonomic information (family level)
families <-matrix(unlist(sample_list[[5]]),nrow = dim(otuFile)[2],ncol = list_length[5],dimnames = list(names(otuFile),unlist(class_list[[5]])))
families <- (t(families))
# Order dataframe according to taxonomic name (descending)
families <- families[order(row.names(families)),]
## Genus level
# Create table with taxonomic information (generum level)
genera <- matrix(unlist(sample_list[[6]]),nrow = dim(otuFile)[2],ncol = list_length[6],dimnames = list(names(otuFile),unlist(class_list[[6]])))
genera <- (t(genera))
# Order dataframe according to taxonomic name (descending)
genera <- genera[order(row.names(genera)),]
genera
View(genera)
bal.Genera <- t(genera)
merged <- merge(bal.Genera, mapping, by=0, all=T)
drop.list <- c("Index", "Tissue", "Tissue_Age", "Age", "Genotype_Age", "Genotype")
merged_selbal <- merged[, !colnames(merged) %in% drop.list]
View(merged_selbal)
df_selbal <- merged_selbal[,-1]
rownames(df_selbal) <- merged_selbal[,1]
View(df_selbal)
x <- df_selbal[,-120]
x <- x[,colSums(x) > 0]
y <- df_selbal$Phenotype
bal.av_tumor_associated <- selbal.cv(x=x_round, y=y, n.fold = 5, n.iter = 10)
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10)
x
View(x)
Crohn
#################################################################################
# Generate tables for each taxonomic class
##Kingdom table
# Create table with taxonomic information (kingdom level)
kingdom <-  matrix(unlist(sample_list[[1]]),nrow = dim(otuFile)[2],ncol = list_length[1],dimnames = list(names(otuFile),unlist(class_list[[1]])))
kingdom <- (t(kingdom))
##Phylum table
# Create table with taxonomic information (phylum level)
phyla <-matrix(unlist(sample_list[[2]]),nrow = dim(otuFile)[2],ncol = list_length[2],dimnames = list(names(otuFile),unlist(class_list[[2]])))
phyla <- (t(phyla))
# Order table according to taxonomic name (descending)
phyla <- phyla[order(row.names(phyla)),]
## Class table
# Create table with taxonomic information (class level)
classes <- matrix(unlist(sample_list[[3]]), nrow = dim(otuFile)[2], ncol = list_length[3], dimnames = list(names(otuFile),unlist(class_list[[3]])))
classes <- (t(classes))
# Order dataframe according to taxonomic name (descending)
classes <- classes[order(row.names(classes)),]
## Orders
# create table with taxonomic information (Order)
orders <-matrix(unlist(sample_list[[4]]),nrow = dim(otuFile)[2],ncol = list_length[4],dimnames = list(names(otuFile),unlist(class_list[[4]])))
orders <- (t(orders))
# Order dataframe according to taxonomic name (descending)
orders <- orders[order(row.names(orders)),]
## Family table
# Create table with taxonomic information (family level)
families <-matrix(unlist(sample_list[[5]]),nrow = dim(otuFile)[2],ncol = list_length[5],dimnames = list(names(otuFile),unlist(class_list[[5]])))
families <- (t(families))
# Order dataframe according to taxonomic name (descending)
families <- families[order(row.names(families)),]
## Genus level
# Create table with taxonomic information (generum level)
genera <- matrix(unlist(sample_list[[6]]),nrow = dim(otuFile)[2],ncol = list_length[6],dimnames = list(names(otuFile),unlist(class_list[[6]])))
genera <- (t(genera))
# Order dataframe according to taxonomic name (descending)
genera <- genera[order(row.names(genera)),]
bal.Genera <- t(genera)
merged <- merge(bal.Genera, mapping, by=0, all=T)
drop.list <- c("Index", "Tissue", "Tissue_Age", "Age", "Genotype_Age", "Genotype")
merged_selbal <- merged[, !colnames(merged) %in% drop.list]
df_selbal <- merged_selbal[,-1]
rownames(df_selbal) <- merged_selbal[,1]
x <- df_selbal[,-120]
x <- x[,colSums(x) > 0]
y <- df_selbal$Phenotype
write.table(x, file = "selbal_test/my_data.tab", sep="\t")
write.table(Crohn, file = "selbal_test/selbal_example.tab", sep="\")
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10)
write.table(x, file = "selbal_test/my_data.tab", sep="\t")
write.table(Crohn, file = "selbal_test/selbal_example.tab", sep="\t")
write.table(x, file = "selbal_test/my_data.tab", sep="\t")
write.table(Crohn, file = "selbal_test/selbal_example.tab", sep="\t")
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10)
traceback()
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10, zero.rep = "one")
bal.av_tumor_associated
traceback
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10, zero.rep = "bayes")
traceback
bal.av_tumor_associated <- selbal.cv(x=x, y=y, n.fold = 5, n.iter = 10, zero.rep = "bayes")
traceback
setwd(Y:/Data/Sequencing/AV_kinetic/atf6_kinetic_reanalysis/Rhea-master/2.Alpha-Diversity)
setwd("Y:/Data/Sequencing/AV_kinetic/atf6_kinetic_reanalysis/Rhea-master/2.Alpha-Diversity")
alpha_div <- read.table("alpha-diversity.tab", sep="\t", header = T, row.names = 1)
View(alpha_div)
alpha_div <- read.table("alpha-diversity_mod.tab", sep="\t", header = T, row.names = 1)
View(alpha_div)
library(dplyr)
library(dplyr)
alpha_div <- read.table("alpha-diversity_mod.tab", sep="\t", header = T, row.names = 1)
library(tidyr)
library(ggplot2)
shannon.effective <- gather(alpha_div, Shannon.effective, Sample_id)
View(shannon.effective)
shannon.effective <- alpha_div %>% gather(Sample_id, Shannon.effective)
View(shannon.effective)
alpha_div <- read.table("alpha-diversity_mod.tab", sep="\t", header = T, row.names = 1)
shannon.effective <- melt(alpha_div)
library(reshape2)
shannon.effective <- melt(alpha_div)
View(shannon.effective)
shannon.effective <- alpha_div$Shannon
shannon.effective
shannon.effective <- alpha_div$Shannon.effective
shannon.effective <- alpha_div["Shannon.effective"]
View(shannon.effective)
shannon.effective <- alpha_div["Shannon.effective"]
richnes <- alpha_div["Richness"]
richness <- alpha_div["Richness"]
shannon.effective <- select("Sample_id", "Shannon.effective")
richness <- select("Sample_id", "Richness")
shannon.effective <- alpha_div %>% select(Sample_id, Shannon.effective)
richness <- alpha_div %>% select(Sample_id, Richness)
View(shannon.effective)
melt_shan <-melt(shannon.effective)
melt_rich <- melt(richness)
View(melt_shan)
View(richness)
mapping_file <- read.table("mapping_file.tab", sep="\t", header = T, row.names = 1)
left_join(mapping_file) %>% shannon.effective
left_join(mapping_file) %>% mutate(shannon.effective)
devtools::install_github("jbisanz/qiime2R")
library(qiime2R)
library(dplyr)
library(ggplot2)
alpha_div <- read.table("alpha-diversity_mod.tab", sep="\t", header = T, row.names = 1)
mapping_file <- read.table("mapping_file.tab", sep="\t", header = T, row.names = 1)
shannon.effective <- alpha_div %>% select(Sample_id, Shannon.effective)
richness <- alpha_div %>% select(Sample_id, Richness)
ggplot(aes(x=week, y=shannon.effective, group=Sample_id)) +
geom_point(size=4) +
geom_line() +
theme_bw() +
xlab("Time (days)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
ggplot(data = shannon.effective) +
geom_point(size=4) +
geom_line() +
theme_bw() +
xlab("Time (days)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
ggplot(data = shannon.effective, aes(shannon.effective$Shannon.effective, shannon.effective$Sample_id)) +
geom_point(size=4) +
geom_line() +
theme_bw() +
xlab("Time (days)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
View(shannon.effective)
merged_shan <- merge(shannon.effective, mapping_file, by=0, all=T)
View(merged_shan)
View(mapping_file)
mapping_file <- read.table("mapping_file.tab", sep="\t", header = 1, row.names = 1)
View(mapping_file)
alpha_div <- read.table("alpha-diversity_mod.tab", sep="\t", header = T, row.names = 1)
mapping_file <- read.table("mapping_file.tab", sep="\t", header = T, row.names = 1, comment.char = "")
shannon.effective <- alpha_div %>% select(Sample_id, Shannon.effective)
richness <- alpha_div %>% select(Sample_id, Richness)
merged_shan <- merge(shannon.effective, mapping_file, by=0, all=T)
View(merged_shan)
merged_shan <- merge(shannon.effective, mapping_file, by="row.names", all=T)
View(merged_shan)
gdf_shan <- group_by(merged_shan, Age_Genotype)
View(gdf_shan)
gdf_shan <- group_by(merged_shan, Age_Genotype) %>% summarise(avg=mean(Age_Genotype, na.rm=TRUE))
shan_mean_by_group <- summarise(avg=mean(merged_shan, Age_Genotype, na.rm=TRUE))
mtcars
shan_mean_by_group <-aggregate(shan_mean_by_group, by="Age_Genotype",
FUN=mean, na.rm=TRUE)
shan_mean_by_group <-aggregate(merged_shan, by="Age_Genotype",
FUN=mean, na.rm=TRUE)
shan_mean_by_group <-aggregate(merged_shan, by=c("Age_Genotype"),
FUN=mean, na.rm=TRUE)
shan_mean_by_group <-aggregate(merged_shan, by=list("Age_Genotype"),
FUN=mean, na.rm=TRUE)
shan_mean_by_group <- merged_shan %>%
group_by(Age_genotype) %>%
summarise_at(vars(-Shannon.effective), funs(mean(., na.rm=TRUE)))
shan_mean_by_group <- merged_shan %>%
group_by(Age_Genotype) %>%
summarise_at(vars(-Shannon.effective), funs(mean(., na.rm=TRUE)))
merged_shan %>%
group_by(Age_Genotype) %>%
summarise_at(vars(-Shannon.effective), funs(mean(., na.rm=TRUE)))
shan_mean_by_group <- merged_shan %>%
group_by(Age) %>%
summarise_at(vars(-Genotype), funs(mean(Shannon.effective, na.rm=TRUE)))
traceback()
shannon_grouped_mean <- aggregate(merged_shan$Shannon.effective, by=list(Age, Genotype), mean)
shannon_grouped_mean <- aggregate(merged_shan$Shannon.effective, by=list(Age=merged_shan$Age, Genotype=merged_shan$Genotype), mean)
View(shannon_grouped_mean)
merged_rich <- merge(richness, mapping_file, by="row.names", all=T)
rich_grouped_mean <- aggregate(merged_rich$Richness, by=list(Age=merged_rich$Age, Genotype=merged_rich$Genotype), mean)
View(rich_grouped_mean)
shannon_grouped_mean
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = x , y= Age, group=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(Genotype)
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = x , y= Age, group=Genotype)) +
geom_point(size=4) +
geom_line() +
#facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = x , y= Age, group=Genotype)) +
geom_point(size=4) +
geom_line() +
#facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = x , y= Age, group=Genotype)) +
geom_point(size=4) +
geom_line() +
#facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, group=Genotype)) +
geom_point(size=4) +
geom_line() +
#facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
#facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(shannon_grouped_mean$Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(~shannon_grouped_mean$Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(rows = shannon_grouped_mean$Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(cols = shannon_grouped_mean$Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
facet_grid()
shannon_grouped_mean <- aggregate(merged_shan$Shannon.effective, by=list(Age=merged_shan$Age, Genotype=merged_shan$Genotype, sex=sex), mean)
rich_grouped_mean <- aggregate(merged_rich$Richness, by=list(Age=merged_rich$Age, Genotype=merged_rich$Genotype, sex=sex), mean)
View(merged_shan)
shannon_grouped_mean <- aggregate(merged_shan$Shannon.effective, by=list(Age=merged_shan$Age,
Genotype=merged_shan$Genotype,
sex=merged_shan$sex), mean)
rich_grouped_mean <- aggregate(merged_rich$Richness, by=list(Age=merged_rich$Age,
Genotype=merged_rich$Genotype,
sex=merged_richsex), mean)
shannon_grouped_mean <- aggregate(merged_shan$Shannon.effective, by=list(Age=merged_shan$Age,
Genotype=merged_shan$Genotype,
sex=merged_shan$sex), mean)
rich_grouped_mean <- aggregate(merged_rich$Richness, by=list(Age=merged_rich$Age,
Genotype=merged_rich$Genotype,
sex=merged_rich$sex), mean)
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(shannon_grouped_mean$Genotype~shannon_grouped_mean$sex) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
shannon_plot <- ggplot(data = shannon_grouped_mean, aes(x = Age , y= x, color=Genotype)) +
geom_point(size=4) +
geom_line() +
facet_grid(shannon_grouped_mean$sex~shannon_grouped_mean$Genotype) +
theme_bw() +
xlab("Time (weeks)") +
ylab("Shannon Diversity") +
ggtitle("Shannon diversity across time")
shannon_plot
